
Plantemoji.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000b10  00000b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000186b  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ec  00000000  00000000  0000257b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095d  00000000  00000000  00002e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  000037c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cb  00000000  00000000  00003b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019cf  00000000  00000000  0000404f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00005a1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e1       	ldi	r30, 0x10	; 16
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	14 d2       	rcall	.+1064   	; 0x472 <main>
  4a:	60 c5       	rjmp	.+2752   	; 0xb0c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <ds18b20crc8>:
	//Poor DS18B20 feels better then...
	*port |= mask;
	*direction |= mask;

	return DS18B20_ERROR_OK;
}
  4e:	66 23       	and	r22, r22
  50:	b9 f0       	breq	.+46     	; 0x80 <ds18b20crc8+0x32>
  52:	fc 01       	movw	r30, r24
  54:	61 50       	subi	r22, 0x01	; 1
  56:	70 e0       	ldi	r23, 0x00	; 0
  58:	6f 5f       	subi	r22, 0xFF	; 255
  5a:	7f 4f       	sbci	r23, 0xFF	; 255
  5c:	68 0f       	add	r22, r24
  5e:	79 1f       	adc	r23, r25
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	4c e8       	ldi	r20, 0x8C	; 140
  64:	21 91       	ld	r18, Z+
  66:	98 e0       	ldi	r25, 0x08	; 8
  68:	38 2f       	mov	r19, r24
  6a:	32 27       	eor	r19, r18
  6c:	86 95       	lsr	r24
  6e:	30 fd       	sbrc	r19, 0
  70:	84 27       	eor	r24, r20
  72:	26 95       	lsr	r18
  74:	91 50       	subi	r25, 0x01	; 1
  76:	c1 f7       	brne	.-16     	; 0x68 <ds18b20crc8+0x1a>
  78:	e6 17       	cp	r30, r22
  7a:	f7 07       	cpc	r31, r23
  7c:	99 f7       	brne	.-26     	; 0x64 <ds18b20crc8+0x16>
  7e:	08 95       	ret
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	08 95       	ret

00000084 <ds18b20match>:
  84:	7f 92       	push	r7
  86:	8f 92       	push	r8
  88:	9f 92       	push	r9
  8a:	af 92       	push	r10
  8c:	bf 92       	push	r11
  8e:	cf 92       	push	r12
  90:	df 92       	push	r13
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	7c 01       	movw	r14, r24
  a0:	6b 01       	movw	r12, r22
  a2:	5a 01       	movw	r10, r20
  a4:	72 2e       	mov	r7, r18
  a6:	48 01       	movw	r8, r16
  a8:	01 2b       	or	r16, r17
  aa:	19 f4       	brne	.+6      	; 0xb2 <ds18b20match+0x2e>
  ac:	0c ec       	ldi	r16, 0xCC	; 204
  ae:	38 d1       	rcall	.+624    	; 0x320 <onewireWrite>
  b0:	0f c0       	rjmp	.+30     	; 0xd0 <ds18b20match+0x4c>
  b2:	05 e5       	ldi	r16, 0x55	; 85
  b4:	35 d1       	rcall	.+618    	; 0x320 <onewireWrite>
  b6:	e4 01       	movw	r28, r8
  b8:	88 e0       	ldi	r24, 0x08	; 8
  ba:	88 0e       	add	r8, r24
  bc:	91 1c       	adc	r9, r1
  be:	09 91       	ld	r16, Y+
  c0:	27 2d       	mov	r18, r7
  c2:	a5 01       	movw	r20, r10
  c4:	b6 01       	movw	r22, r12
  c6:	c7 01       	movw	r24, r14
  c8:	2b d1       	rcall	.+598    	; 0x320 <onewireWrite>
  ca:	c8 15       	cp	r28, r8
  cc:	d9 05       	cpc	r29, r9
  ce:	b9 f7       	brne	.-18     	; 0xbe <ds18b20match+0x3a>
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	ff 90       	pop	r15
  da:	ef 90       	pop	r14
  dc:	df 90       	pop	r13
  de:	cf 90       	pop	r12
  e0:	bf 90       	pop	r11
  e2:	af 90       	pop	r10
  e4:	9f 90       	pop	r9
  e6:	8f 90       	pop	r8
  e8:	7f 90       	pop	r7
  ea:	08 95       	ret

000000ec <ds18b20convert>:
  ec:	bf 92       	push	r11
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
 100:	7b 01       	movw	r14, r22
 102:	6a 01       	movw	r12, r20
 104:	b2 2e       	mov	r11, r18
 106:	a4 d0       	rcall	.+328    	; 0x250 <onewireInit>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	61 f0       	breq	.+24     	; 0x124 <ds18b20convert+0x38>
 10c:	2b 2d       	mov	r18, r11
 10e:	a6 01       	movw	r20, r12
 110:	b7 01       	movw	r22, r14
 112:	ce 01       	movw	r24, r28
 114:	b7 df       	rcall	.-146    	; 0x84 <ds18b20match>
 116:	04 e4       	ldi	r16, 0x44	; 68
 118:	2b 2d       	mov	r18, r11
 11a:	a6 01       	movw	r20, r12
 11c:	b7 01       	movw	r22, r14
 11e:	ce 01       	movw	r24, r28
 120:	ff d0       	rcall	.+510    	; 0x320 <onewireWrite>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	bf 90       	pop	r11
 136:	08 95       	ret

00000138 <ds18b20rsp>:
 138:	7f 92       	push	r7
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	6c 01       	movw	r12, r24
 154:	5b 01       	movw	r10, r22
 156:	4a 01       	movw	r8, r20
 158:	72 2e       	mov	r7, r18
 15a:	7a d0       	rcall	.+244    	; 0x250 <onewireInit>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	a9 f1       	breq	.+106    	; 0x1ca <ds18b20rsp+0x92>
 160:	27 2d       	mov	r18, r7
 162:	a4 01       	movw	r20, r8
 164:	b5 01       	movw	r22, r10
 166:	c6 01       	movw	r24, r12
 168:	8d df       	rcall	.-230    	; 0x84 <ds18b20match>
 16a:	0e eb       	ldi	r16, 0xBE	; 190
 16c:	27 2d       	mov	r18, r7
 16e:	a4 01       	movw	r20, r8
 170:	b5 01       	movw	r22, r10
 172:	c6 01       	movw	r24, r12
 174:	d5 d0       	rcall	.+426    	; 0x320 <onewireWrite>
 176:	e7 01       	movw	r28, r14
 178:	87 01       	movw	r16, r14
 17a:	07 5f       	subi	r16, 0xF7	; 247
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
 17e:	27 2d       	mov	r18, r7
 180:	a4 01       	movw	r20, r8
 182:	b5 01       	movw	r22, r10
 184:	c6 01       	movw	r24, r12
 186:	23 d1       	rcall	.+582    	; 0x3ce <onewireRead>
 188:	89 93       	st	Y+, r24
 18a:	c0 17       	cp	r28, r16
 18c:	d1 07       	cpc	r29, r17
 18e:	b9 f7       	brne	.-18     	; 0x17e <ds18b20rsp+0x46>
 190:	f7 01       	movw	r30, r14
 192:	90 81       	ld	r25, Z
 194:	81 81       	ldd	r24, Z+1	; 0x01
 196:	89 2b       	or	r24, r25
 198:	92 81       	ldd	r25, Z+2	; 0x02
 19a:	89 2b       	or	r24, r25
 19c:	93 81       	ldd	r25, Z+3	; 0x03
 19e:	89 2b       	or	r24, r25
 1a0:	94 81       	ldd	r25, Z+4	; 0x04
 1a2:	89 2b       	or	r24, r25
 1a4:	95 81       	ldd	r25, Z+5	; 0x05
 1a6:	89 2b       	or	r24, r25
 1a8:	96 81       	ldd	r25, Z+6	; 0x06
 1aa:	89 2b       	or	r24, r25
 1ac:	97 81       	ldd	r25, Z+7	; 0x07
 1ae:	89 2b       	or	r24, r25
 1b0:	49 f0       	breq	.+18     	; 0x1c4 <ds18b20rsp+0x8c>
 1b2:	68 e0       	ldi	r22, 0x08	; 8
 1b4:	c7 01       	movw	r24, r14
 1b6:	4b df       	rcall	.-362    	; 0x4e <ds18b20crc8>
 1b8:	f7 01       	movw	r30, r14
 1ba:	90 85       	ldd	r25, Z+8	; 0x08
 1bc:	89 13       	cpse	r24, r25
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <ds18b20rsp+0x90>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <ds18b20rsp+0x92>
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <ds18b20rsp+0x92>
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	bf 90       	pop	r11
 1dc:	af 90       	pop	r10
 1de:	9f 90       	pop	r9
 1e0:	8f 90       	pop	r8
 1e2:	7f 90       	pop	r7
 1e4:	08 95       	ret

000001e6 <ds18b20read>:

//! Read temperature
uint8_t ds18b20read( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom, int16_t *temperature )
{
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	29 97       	sbiw	r28, 0x09	; 9
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	67 01       	movw	r12, r14

	uint8_t sp[9];
	uint8_t ec = 0;

	//Communication, pull-up, CRC checks happen here
	ec = ds18b20rsp( port, direction, portin, mask, rom, sp );
 208:	fe 01       	movw	r30, r28
 20a:	31 96       	adiw	r30, 0x01	; 1
 20c:	7f 01       	movw	r14, r30
 20e:	94 df       	rcall	.-216    	; 0x138 <ds18b20rsp>

	if ( ec != DS18B20_ERROR_OK )
 210:	88 23       	and	r24, r24
 212:	21 f0       	breq	.+8      	; 0x21c <ds18b20read+0x36>
	{
		*temperature = 0;
 214:	f6 01       	movw	r30, r12
 216:	11 82       	std	Z+1, r1	; 0x01
 218:	10 82       	st	Z, r1
		return ec;
 21a:	0b c0       	rjmp	.+22     	; 0x232 <ds18b20read+0x4c>
	}

	//Get temperature from received data
	*temperature = (int16_t)( sp[1] << 8 ) + sp[0];
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	98 2f       	mov	r25, r24
 222:	88 27       	eor	r24, r24
 224:	29 81       	ldd	r18, Y+1	; 0x01
 226:	82 0f       	add	r24, r18
 228:	91 1d       	adc	r25, r1
 22a:	f6 01       	movw	r30, r12
 22c:	91 83       	std	Z+1, r25	; 0x01
 22e:	80 83       	st	Z, r24

	return DS18B20_ERROR_OK;
 230:	80 e0       	ldi	r24, 0x00	; 0
}
 232:	29 96       	adiw	r28, 0x09	; 9
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	08 95       	ret

00000250 <onewireInit>:
#include <inttypes.h>
#include "onewire.h"

//! Initializes 1wire bus before transmission
uint8_t onewireInit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	dc 01       	movw	r26, r24
 256:	fb 01       	movw	r30, r22
	uint8_t response = 0;
	uint8_t sreg = SREG; //Store status register
 258:	3f b7       	in	r19, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
 25a:	8c 91       	ld	r24, X
 25c:	82 2b       	or	r24, r18
 25e:	8c 93       	st	X, r24
	*direction |= mask; //Set port to output
 260:	80 81       	ld	r24, Z
 262:	82 2b       	or	r24, r18
 264:	80 83       	st	Z, r24
	*port &= ~mask; //Write 0 to output
 266:	9c 91       	ld	r25, X
 268:	82 2f       	mov	r24, r18
 26a:	80 95       	com	r24
 26c:	98 23       	and	r25, r24
 26e:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	cf ea       	ldi	r28, 0xAF	; 175
 272:	d4 e0       	ldi	r29, 0x04	; 4
 274:	21 97       	sbiw	r28, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <onewireInit+0x24>
 278:	00 c0       	rjmp	.+0      	; 0x27a <onewireInit+0x2a>
 27a:	00 00       	nop

	_delay_us( 600 );

	*direction &= ~mask; //Set port to input
 27c:	90 81       	ld	r25, Z
 27e:	89 23       	and	r24, r25
 280:	80 83       	st	Z, r24
 282:	da eb       	ldi	r29, 0xBA	; 186
 284:	da 95       	dec	r29
 286:	f1 f7       	brne	.-4      	; 0x284 <onewireInit+0x34>
 288:	00 c0       	rjmp	.+0      	; 0x28a <onewireInit+0x3a>

	_delay_us( 70 );

	response = *portin & mask; //Read input
 28a:	ea 01       	movw	r28, r20
 28c:	88 81       	ld	r24, Y
 28e:	cf e8       	ldi	r28, 0x8F	; 143
 290:	d1 e0       	ldi	r29, 0x01	; 1
 292:	21 97       	sbiw	r28, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <onewireInit+0x42>
 296:	00 c0       	rjmp	.+0      	; 0x298 <onewireInit+0x48>
 298:	00 00       	nop

	_delay_us( 200 );

	*port |= mask; //Write 1 to output
 29a:	9c 91       	ld	r25, X
 29c:	92 2b       	or	r25, r18
 29e:	9c 93       	st	X, r25
	*direction |= mask; //Set port to output
 2a0:	90 81       	ld	r25, Z
 2a2:	92 2b       	or	r25, r18
 2a4:	90 83       	st	Z, r25
 2a6:	ef ea       	ldi	r30, 0xAF	; 175
 2a8:	f4 e0       	ldi	r31, 0x04	; 4
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <onewireInit+0x5a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <onewireInit+0x60>
 2b0:	00 00       	nop

	_delay_us( 600 );

	SREG = sreg; //Restore status register
 2b2:	3f bf       	out	0x3f, r19	; 63

	return response != 0 ? ONEWIRE_ERROR_COMM : ONEWIRE_ERROR_OK;
 2b4:	28 23       	and	r18, r24
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	09 f4       	brne	.+2      	; 0x2bc <onewireInit+0x6c>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <onewireWriteBit>:

//! Sends a single bit over the 1wire bus
uint8_t onewireWriteBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t bit )
{
 2c2:	0f 93       	push	r16
 2c4:	fc 01       	movw	r30, r24
	uint8_t sreg = SREG;
 2c6:	9f b7       	in	r25, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
 2c8:	80 81       	ld	r24, Z
 2ca:	82 2b       	or	r24, r18
 2cc:	80 83       	st	Z, r24
	*direction |= mask;
 2ce:	db 01       	movw	r26, r22
 2d0:	8c 91       	ld	r24, X
 2d2:	82 2b       	or	r24, r18
 2d4:	8c 93       	st	X, r24
	*port &= ~mask; //Write 0 to output
 2d6:	80 81       	ld	r24, Z
 2d8:	32 2f       	mov	r19, r18
 2da:	30 95       	com	r19
 2dc:	83 23       	and	r24, r19
 2de:	80 83       	st	Z, r24

	if ( bit != 0 ) _delay_us( 8 );
 2e0:	00 23       	and	r16, r16
 2e2:	61 f0       	breq	.+24     	; 0x2fc <onewireWriteBit+0x3a>
 2e4:	b5 e1       	ldi	r27, 0x15	; 21
 2e6:	ba 95       	dec	r27
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <onewireWriteBit+0x24>
 2ea:	00 00       	nop
	else _delay_us( 80 );

	*port |= mask;
 2ec:	80 81       	ld	r24, Z
 2ee:	28 2b       	or	r18, r24
 2f0:	20 83       	st	Z, r18
 2f2:	85 ed       	ldi	r24, 0xD5	; 213
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <onewireWriteBit+0x32>
 2f8:	00 00       	nop
 2fa:	0b c0       	rjmp	.+22     	; 0x312 <onewireWriteBit+0x50>
 2fc:	a5 ed       	ldi	r26, 0xD5	; 213
 2fe:	aa 95       	dec	r26
 300:	f1 f7       	brne	.-4      	; 0x2fe <onewireWriteBit+0x3c>
 302:	00 00       	nop
 304:	80 81       	ld	r24, Z
 306:	28 2b       	or	r18, r24
 308:	20 83       	st	Z, r18
 30a:	b5 e0       	ldi	r27, 0x05	; 5
 30c:	ba 95       	dec	r27
 30e:	f1 f7       	brne	.-4      	; 0x30c <onewireWriteBit+0x4a>
 310:	00 00       	nop

	if ( bit != 0 ) _delay_us( 80 );
	else _delay_us( 2 );

	SREG = sreg;
 312:	9f bf       	out	0x3f, r25	; 63

	return bit != 0;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	01 11       	cpse	r16, r1
 318:	01 c0       	rjmp	.+2      	; 0x31c <onewireWriteBit+0x5a>
 31a:	80 e0       	ldi	r24, 0x00	; 0
}
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <onewireWrite>:

//! Transmits a byte over 1wire bus
void onewireWrite( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t data )
{
 320:	7f 92       	push	r7
 322:	8f 92       	push	r8
 324:	9f 92       	push	r9
 326:	af 92       	push	r10
 328:	bf 92       	push	r11
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	4c 01       	movw	r8, r24
 33c:	5b 01       	movw	r10, r22
 33e:	6a 01       	movw	r12, r20
 340:	12 2f       	mov	r17, r18
 342:	d0 2f       	mov	r29, r16
	uint8_t sreg = SREG; //Store status register
 344:	7f b6       	in	r7, 0x3f	; 63
 346:	68 94       	set
 348:	ee 24       	eor	r14, r14
 34a:	e3 f8       	bld	r14, 3
 34c:	f1 2c       	mov	r15, r1

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
 34e:	c1 e0       	ldi	r28, 0x01	; 1
		onewireWriteBit( port, direction, portin, mask, data & i );
 350:	0d 2f       	mov	r16, r29
 352:	0c 23       	and	r16, r28
 354:	21 2f       	mov	r18, r17
 356:	a6 01       	movw	r20, r12
 358:	b5 01       	movw	r22, r10
 35a:	c4 01       	movw	r24, r8
 35c:	b2 df       	rcall	.-156    	; 0x2c2 <onewireWriteBit>

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
 35e:	cc 0f       	add	r28, r28
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	e8 1a       	sub	r14, r24
 364:	f1 08       	sbc	r15, r1
 366:	a1 f7       	brne	.-24     	; 0x350 <onewireWrite+0x30>
		onewireWriteBit( port, direction, portin, mask, data & i );

	SREG = sreg;
 368:	7f be       	out	0x3f, r7	; 63
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	bf 90       	pop	r11
 37c:	af 90       	pop	r10
 37e:	9f 90       	pop	r9
 380:	8f 90       	pop	r8
 382:	7f 90       	pop	r7
 384:	08 95       	ret

00000386 <onewireReadBit>:

//! Reads a bit from the 1wire bus
uint8_t onewireReadBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
 386:	dc 01       	movw	r26, r24
 388:	fb 01       	movw	r30, r22
	uint8_t bit = 0;
	uint8_t sreg = SREG;
 38a:	3f b7       	in	r19, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
 38c:	8c 91       	ld	r24, X
 38e:	82 2b       	or	r24, r18
 390:	8c 93       	st	X, r24
	*direction |= mask;
 392:	80 81       	ld	r24, Z
 394:	82 2b       	or	r24, r18
 396:	80 83       	st	Z, r24
	*port &= ~mask; //Write 0 to output
 398:	8c 91       	ld	r24, X
 39a:	92 2f       	mov	r25, r18
 39c:	90 95       	com	r25
 39e:	89 23       	and	r24, r25
 3a0:	8c 93       	st	X, r24
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	8a 95       	dec	r24
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <onewireReadBit+0x1e>
 3a8:	00 00       	nop
	_delay_us( 2 );
	*direction &= ~mask; //Set port to input
 3aa:	80 81       	ld	r24, Z
 3ac:	98 23       	and	r25, r24
 3ae:	90 83       	st	Z, r25
 3b0:	9d e0       	ldi	r25, 0x0D	; 13
 3b2:	9a 95       	dec	r25
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <onewireReadBit+0x2c>
 3b6:	00 00       	nop
	_delay_us( 5 );
	bit = ( ( *portin & mask ) != 0 ); //Read input
 3b8:	fa 01       	movw	r30, r20
 3ba:	80 81       	ld	r24, Z
 3bc:	f0 ea       	ldi	r31, 0xA0	; 160
 3be:	fa 95       	dec	r31
 3c0:	f1 f7       	brne	.-4      	; 0x3be <onewireReadBit+0x38>
	_delay_us( 60 );
	SREG = sreg;
 3c2:	3f bf       	out	0x3f, r19	; 63

	return bit;
 3c4:	28 23       	and	r18, r24
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	09 f4       	brne	.+2      	; 0x3cc <onewireReadBit+0x46>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
}
 3cc:	08 95       	ret

000003ce <onewireRead>:

//! Reads a byte from the 1wire bus
uint8_t onewireRead( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
 3ce:	8f 92       	push	r8
 3d0:	9f 92       	push	r9
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	5c 01       	movw	r10, r24
 3e8:	6b 01       	movw	r12, r22
 3ea:	7a 01       	movw	r14, r20
 3ec:	92 2e       	mov	r9, r18
	uint8_t sreg = SREG; //Store status register
 3ee:	8f b6       	in	r8, 0x3f	; 63
 3f0:	08 e0       	ldi	r16, 0x08	; 8
 3f2:	10 e0       	ldi	r17, 0x00	; 0

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
 3f4:	c1 e0       	ldi	r28, 0x01	; 1

//! Reads a byte from the 1wire bus
uint8_t onewireRead( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
	uint8_t sreg = SREG; //Store status register
	uint8_t data = 0;
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
		data |= onewireReadBit( port, direction, portin, mask ) * i;
 3f8:	29 2d       	mov	r18, r9
 3fa:	a7 01       	movw	r20, r14
 3fc:	b6 01       	movw	r22, r12
 3fe:	c5 01       	movw	r24, r10
 400:	c2 df       	rcall	.-124    	; 0x386 <onewireReadBit>
 402:	8c 9f       	mul	r24, r28
 404:	c0 01       	movw	r24, r0
 406:	11 24       	eor	r1, r1
 408:	d8 2b       	or	r29, r24

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
 40a:	cc 0f       	add	r28, r28
 40c:	01 50       	subi	r16, 0x01	; 1
 40e:	11 09       	sbc	r17, r1
 410:	99 f7       	brne	.-26     	; 0x3f8 <onewireRead+0x2a>
		data |= onewireReadBit( port, direction, portin, mask ) * i;

	SREG = sreg;
 412:	8f be       	out	0x3f, r8	; 63

	return data;
}
 414:	8d 2f       	mov	r24, r29
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	9f 90       	pop	r9
 42c:	8f 90       	pop	r8
 42e:	08 95       	ret

00000430 <initPorts>:
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
	/* Put data into buffer, sends the data */
	UDR = data;
 430:	17 ba       	out	0x17, r1	; 23
 432:	17 ba       	out	0x17, r1	; 23
 434:	81 b3       	in	r24, 0x11	; 17
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	81 bb       	out	0x11, r24	; 17
 43a:	ac 9a       	sbi	0x15, 4	; 21
 43c:	08 95       	ret

0000043e <USART_Init>:
 43e:	90 bd       	out	0x20, r25	; 32
 440:	89 b9       	out	0x09, r24	; 9
 442:	88 e1       	ldi	r24, 0x18	; 24
 444:	8a b9       	out	0x0a, r24	; 10
 446:	57 9a       	sbi	0x0a, 7	; 10
 448:	86 e8       	ldi	r24, 0x86	; 134
 44a:	80 bd       	out	0x20, r24	; 32
 44c:	08 95       	ret

0000044e <usart_putchar>:
}


void usart_putchar(char data) {
	// Wait for empty transmit buffer
	while ( !(UCSRA & (_BV(UDRE))) );
 44e:	5d 9b       	sbis	0x0b, 5	; 11
 450:	fe cf       	rjmp	.-4      	; 0x44e <usart_putchar>
	// Start transmission
	UDR = data;
 452:	8c b9       	out	0x0c, r24	; 12
 454:	08 95       	ret

00000456 <usart_pstr>:
}

void usart_pstr(char *s) {
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	ec 01       	movw	r28, r24
	// loop through entire string
	while (*s) {
 45c:	88 81       	ld	r24, Y
 45e:	88 23       	and	r24, r24
 460:	29 f0       	breq	.+10     	; 0x46c <__stack+0xd>
 462:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(*s);
 464:	f4 df       	rcall	.-24     	; 0x44e <usart_putchar>
	UDR = data;
}

void usart_pstr(char *s) {
	// loop through entire string
	while (*s) {
 466:	89 91       	ld	r24, Y+
 468:	81 11       	cpse	r24, r1
 46a:	fc cf       	rjmp	.-8      	; 0x464 <__stack+0x5>
		usart_putchar(*s);
		s++;
	}
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <main>:

#define FOSC 8000000// Clock Speed
#define MYUBRR FOSC/16/BAUD-1

int main()
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	c2 52       	subi	r28, 0x22	; 34
 47c:	d3 40       	sbci	r29, 0x03	; 3
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
	initPorts();
 488:	d3 df       	rcall	.-90     	; 0x430 <initPorts>
	OSCCAL=0x93;
 48a:	83 e9       	ldi	r24, 0x93	; 147
 48c:	81 bf       	out	0x31, r24	; 49
	USART_Init(MYUBRR);	//RTC_Init();
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	d5 df       	rcall	.-86     	; 0x43e <USART_Init>
	
	ADCSRA |= (1<<ADEN); //enable ADC
 494:	37 9a       	sbi	0x06, 7	; 6
	ADMUX |= ( (0<<REFS1) | (1<<REFS0) ); // set to ref to AVCC & AREF with capacitor
 496:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= 5;
 498:	87 b1       	in	r24, 0x07	; 7
 49a:	85 60       	ori	r24, 0x05	; 5
 49c:	87 b9       	out	0x07, r24	; 7

	int temp;
	
	PORTD = PORTD | 0b11111111;
 49e:	82 b3       	in	r24, 0x12	; 18
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	81 e1       	ldi	r24, 0x11	; 17
 4a8:	9a e7       	ldi	r25, 0x7A	; 122
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0x38>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0x42>
 4b4:	00 00       	nop
	_delay_ms( 5000 );
	PORTD = PORTD | 0b00000000;
 4b6:	82 b3       	in	r24, 0x12	; 18
 4b8:	82 bb       	out	0x12, r24	; 18

		//Read temperature (without ROM matching)
		ds18b20read( &PORTC, &DDRC, &PINC, ( 1 << 0 ), NULL, &temp );

		char strbuf3[400];
		sprintf (strbuf3, "temp: %d \r\n", temp);
 4ba:	0f 2e       	mov	r0, r31
 4bc:	f7 e6       	ldi	r31, 0x67	; 103
 4be:	af 2e       	mov	r10, r31
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	bf 2e       	mov	r11, r31
 4c4:	f0 2d       	mov	r31, r0
 4c6:	6e 01       	movw	r12, r28
 4c8:	23 e0       	ldi	r18, 0x03	; 3
 4ca:	c2 0e       	add	r12, r18
 4cc:	d1 1c       	adc	r13, r1
	PORTD = PORTD | 0b00000000;

	while(1)
	{
		char strbuf2[400];
		sprintf (strbuf2, "hi! \r\n");
 4ce:	87 e0       	ldi	r24, 0x07	; 7
 4d0:	e0 e6       	ldi	r30, 0x60	; 96
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	de 01       	movw	r26, r28
 4d6:	ad 56       	subi	r26, 0x6D	; 109
 4d8:	be 4f       	sbci	r27, 0xFE	; 254
 4da:	01 90       	ld	r0, Z+
 4dc:	0d 92       	st	X+, r0
 4de:	8a 95       	dec	r24
 4e0:	e1 f7       	brne	.-8      	; 0x4da <main+0x68>
		usart_pstr(strbuf2);
 4e2:	ce 01       	movw	r24, r28
 4e4:	8d 56       	subi	r24, 0x6D	; 109
 4e6:	9e 4f       	sbci	r25, 0xFE	; 254
 4e8:	b6 df       	rcall	.-148    	; 0x456 <usart_pstr>
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	99 e6       	ldi	r25, 0x69	; 105
 4ee:	28 e1       	ldi	r18, 0x18	; 24
 4f0:	81 50       	subi	r24, 0x01	; 1
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	20 40       	sbci	r18, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x7e>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0x88>
 4fa:	00 00       	nop
		_delay_ms(1000);
		
		//Start conversion (without ROM matching) 1 << (0) means pin.0, 1 << (5) means pin.5  
		ds18b20convert( &PORTC, &DDRC, &PINC, ( 1 << 0 ), NULL );
 4fc:	00 e0       	ldi	r16, 0x00	; 0
 4fe:	10 e0       	ldi	r17, 0x00	; 0
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	43 e3       	ldi	r20, 0x33	; 51
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	64 e3       	ldi	r22, 0x34	; 52
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	85 e3       	ldi	r24, 0x35	; 53
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	ee dd       	rcall	.-1060   	; 0xec <ds18b20convert>
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	99 e6       	ldi	r25, 0x69	; 105
 514:	28 e1       	ldi	r18, 0x18	; 24
 516:	81 50       	subi	r24, 0x01	; 1
 518:	90 40       	sbci	r25, 0x00	; 0
 51a:	20 40       	sbci	r18, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <main+0xa4>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <main+0xae>
 520:	00 00       	nop

		//Delay (sensor needs time to perform conversion)
		_delay_ms( 1000 );

		//Read temperature (without ROM matching)
		ds18b20read( &PORTC, &DDRC, &PINC, ( 1 << 0 ), NULL, &temp );
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	7c 01       	movw	r14, r24
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	43 e3       	ldi	r20, 0x33	; 51
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	64 e3       	ldi	r22, 0x34	; 52
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	85 e3       	ldi	r24, 0x35	; 53
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	57 de       	rcall	.-850    	; 0x1e6 <ds18b20read>

		char strbuf3[400];
		sprintf (strbuf3, "temp: %d \r\n", temp);
 538:	8a 81       	ldd	r24, Y+2	; 0x02
 53a:	8f 93       	push	r24
 53c:	89 81       	ldd	r24, Y+1	; 0x01
 53e:	8f 93       	push	r24
 540:	bf 92       	push	r11
 542:	af 92       	push	r10
 544:	df 92       	push	r13
 546:	cf 92       	push	r12
 548:	09 d0       	rcall	.+18     	; 0x55c <sprintf>
		
		usart_pstr(strbuf3);
 54a:	c6 01       	movw	r24, r12
 54c:	84 df       	rcall	.-248    	; 0x456 <usart_pstr>
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	b9 cf       	rjmp	.-142    	; 0x4ce <main+0x5c>

0000055c <sprintf>:
 55c:	ae e0       	ldi	r26, 0x0E	; 14
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	e3 eb       	ldi	r30, 0xB3	; 179
 562:	f2 e0       	ldi	r31, 0x02	; 2
 564:	aa c2       	rjmp	.+1364   	; 0xaba <__prologue_saves__+0x1c>
 566:	0d 89       	ldd	r16, Y+21	; 0x15
 568:	1e 89       	ldd	r17, Y+22	; 0x16
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	8c 83       	std	Y+4, r24	; 0x04
 56e:	1a 83       	std	Y+2, r17	; 0x02
 570:	09 83       	std	Y+1, r16	; 0x01
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	9f e7       	ldi	r25, 0x7F	; 127
 576:	9e 83       	std	Y+6, r25	; 0x06
 578:	8d 83       	std	Y+5, r24	; 0x05
 57a:	ae 01       	movw	r20, r28
 57c:	47 5e       	subi	r20, 0xE7	; 231
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	6f 89       	ldd	r22, Y+23	; 0x17
 582:	78 8d       	ldd	r23, Y+24	; 0x18
 584:	ce 01       	movw	r24, r28
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	08 d0       	rcall	.+16     	; 0x59a <vfprintf>
 58a:	ef 81       	ldd	r30, Y+7	; 0x07
 58c:	f8 85       	ldd	r31, Y+8	; 0x08
 58e:	e0 0f       	add	r30, r16
 590:	f1 1f       	adc	r31, r17
 592:	10 82       	st	Z, r1
 594:	2e 96       	adiw	r28, 0x0e	; 14
 596:	e4 e0       	ldi	r30, 0x04	; 4
 598:	ac c2       	rjmp	.+1368   	; 0xaf2 <__epilogue_restores__+0x1c>

0000059a <vfprintf>:
 59a:	ab e0       	ldi	r26, 0x0B	; 11
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	e2 ed       	ldi	r30, 0xD2	; 210
 5a0:	f2 e0       	ldi	r31, 0x02	; 2
 5a2:	7d c2       	rjmp	.+1274   	; 0xa9e <__prologue_saves__>
 5a4:	6c 01       	movw	r12, r24
 5a6:	7b 01       	movw	r14, r22
 5a8:	8a 01       	movw	r16, r20
 5aa:	fc 01       	movw	r30, r24
 5ac:	17 82       	std	Z+7, r1	; 0x07
 5ae:	16 82       	std	Z+6, r1	; 0x06
 5b0:	83 81       	ldd	r24, Z+3	; 0x03
 5b2:	81 ff       	sbrs	r24, 1
 5b4:	bf c1       	rjmp	.+894    	; 0x934 <vfprintf+0x39a>
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	3c 01       	movw	r6, r24
 5bc:	f6 01       	movw	r30, r12
 5be:	93 81       	ldd	r25, Z+3	; 0x03
 5c0:	f7 01       	movw	r30, r14
 5c2:	93 fd       	sbrc	r25, 3
 5c4:	85 91       	lpm	r24, Z+
 5c6:	93 ff       	sbrs	r25, 3
 5c8:	81 91       	ld	r24, Z+
 5ca:	7f 01       	movw	r14, r30
 5cc:	88 23       	and	r24, r24
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <vfprintf+0x38>
 5d0:	ad c1       	rjmp	.+858    	; 0x92c <vfprintf+0x392>
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <vfprintf+0x4a>
 5d6:	93 fd       	sbrc	r25, 3
 5d8:	85 91       	lpm	r24, Z+
 5da:	93 ff       	sbrs	r25, 3
 5dc:	81 91       	ld	r24, Z+
 5de:	7f 01       	movw	r14, r30
 5e0:	85 32       	cpi	r24, 0x25	; 37
 5e2:	21 f4       	brne	.+8      	; 0x5ec <vfprintf+0x52>
 5e4:	b6 01       	movw	r22, r12
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	c0 d1       	rcall	.+896    	; 0x96a <fputc>
 5ea:	e8 cf       	rjmp	.-48     	; 0x5bc <vfprintf+0x22>
 5ec:	91 2c       	mov	r9, r1
 5ee:	21 2c       	mov	r2, r1
 5f0:	31 2c       	mov	r3, r1
 5f2:	ff e1       	ldi	r31, 0x1F	; 31
 5f4:	f3 15       	cp	r31, r3
 5f6:	d8 f0       	brcs	.+54     	; 0x62e <vfprintf+0x94>
 5f8:	8b 32       	cpi	r24, 0x2B	; 43
 5fa:	79 f0       	breq	.+30     	; 0x61a <vfprintf+0x80>
 5fc:	38 f4       	brcc	.+14     	; 0x60c <vfprintf+0x72>
 5fe:	80 32       	cpi	r24, 0x20	; 32
 600:	79 f0       	breq	.+30     	; 0x620 <vfprintf+0x86>
 602:	83 32       	cpi	r24, 0x23	; 35
 604:	a1 f4       	brne	.+40     	; 0x62e <vfprintf+0x94>
 606:	23 2d       	mov	r18, r3
 608:	20 61       	ori	r18, 0x10	; 16
 60a:	1d c0       	rjmp	.+58     	; 0x646 <vfprintf+0xac>
 60c:	8d 32       	cpi	r24, 0x2D	; 45
 60e:	61 f0       	breq	.+24     	; 0x628 <vfprintf+0x8e>
 610:	80 33       	cpi	r24, 0x30	; 48
 612:	69 f4       	brne	.+26     	; 0x62e <vfprintf+0x94>
 614:	23 2d       	mov	r18, r3
 616:	21 60       	ori	r18, 0x01	; 1
 618:	16 c0       	rjmp	.+44     	; 0x646 <vfprintf+0xac>
 61a:	83 2d       	mov	r24, r3
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	38 2e       	mov	r3, r24
 620:	e3 2d       	mov	r30, r3
 622:	e4 60       	ori	r30, 0x04	; 4
 624:	3e 2e       	mov	r3, r30
 626:	2a c0       	rjmp	.+84     	; 0x67c <vfprintf+0xe2>
 628:	f3 2d       	mov	r31, r3
 62a:	f8 60       	ori	r31, 0x08	; 8
 62c:	1d c0       	rjmp	.+58     	; 0x668 <vfprintf+0xce>
 62e:	37 fc       	sbrc	r3, 7
 630:	2d c0       	rjmp	.+90     	; 0x68c <vfprintf+0xf2>
 632:	20 ed       	ldi	r18, 0xD0	; 208
 634:	28 0f       	add	r18, r24
 636:	2a 30       	cpi	r18, 0x0A	; 10
 638:	40 f0       	brcs	.+16     	; 0x64a <vfprintf+0xb0>
 63a:	8e 32       	cpi	r24, 0x2E	; 46
 63c:	b9 f4       	brne	.+46     	; 0x66c <vfprintf+0xd2>
 63e:	36 fc       	sbrc	r3, 6
 640:	75 c1       	rjmp	.+746    	; 0x92c <vfprintf+0x392>
 642:	23 2d       	mov	r18, r3
 644:	20 64       	ori	r18, 0x40	; 64
 646:	32 2e       	mov	r3, r18
 648:	19 c0       	rjmp	.+50     	; 0x67c <vfprintf+0xe2>
 64a:	36 fe       	sbrs	r3, 6
 64c:	06 c0       	rjmp	.+12     	; 0x65a <vfprintf+0xc0>
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	98 9e       	mul	r9, r24
 652:	20 0d       	add	r18, r0
 654:	11 24       	eor	r1, r1
 656:	92 2e       	mov	r9, r18
 658:	11 c0       	rjmp	.+34     	; 0x67c <vfprintf+0xe2>
 65a:	ea e0       	ldi	r30, 0x0A	; 10
 65c:	2e 9e       	mul	r2, r30
 65e:	20 0d       	add	r18, r0
 660:	11 24       	eor	r1, r1
 662:	22 2e       	mov	r2, r18
 664:	f3 2d       	mov	r31, r3
 666:	f0 62       	ori	r31, 0x20	; 32
 668:	3f 2e       	mov	r3, r31
 66a:	08 c0       	rjmp	.+16     	; 0x67c <vfprintf+0xe2>
 66c:	8c 36       	cpi	r24, 0x6C	; 108
 66e:	21 f4       	brne	.+8      	; 0x678 <vfprintf+0xde>
 670:	83 2d       	mov	r24, r3
 672:	80 68       	ori	r24, 0x80	; 128
 674:	38 2e       	mov	r3, r24
 676:	02 c0       	rjmp	.+4      	; 0x67c <vfprintf+0xe2>
 678:	88 36       	cpi	r24, 0x68	; 104
 67a:	41 f4       	brne	.+16     	; 0x68c <vfprintf+0xf2>
 67c:	f7 01       	movw	r30, r14
 67e:	93 fd       	sbrc	r25, 3
 680:	85 91       	lpm	r24, Z+
 682:	93 ff       	sbrs	r25, 3
 684:	81 91       	ld	r24, Z+
 686:	7f 01       	movw	r14, r30
 688:	81 11       	cpse	r24, r1
 68a:	b3 cf       	rjmp	.-154    	; 0x5f2 <vfprintf+0x58>
 68c:	98 2f       	mov	r25, r24
 68e:	9f 7d       	andi	r25, 0xDF	; 223
 690:	95 54       	subi	r25, 0x45	; 69
 692:	93 30       	cpi	r25, 0x03	; 3
 694:	28 f4       	brcc	.+10     	; 0x6a0 <vfprintf+0x106>
 696:	0c 5f       	subi	r16, 0xFC	; 252
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	9f e3       	ldi	r25, 0x3F	; 63
 69c:	99 83       	std	Y+1, r25	; 0x01
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <vfprintf+0x120>
 6a0:	83 36       	cpi	r24, 0x63	; 99
 6a2:	31 f0       	breq	.+12     	; 0x6b0 <vfprintf+0x116>
 6a4:	83 37       	cpi	r24, 0x73	; 115
 6a6:	71 f0       	breq	.+28     	; 0x6c4 <vfprintf+0x12a>
 6a8:	83 35       	cpi	r24, 0x53	; 83
 6aa:	09 f0       	breq	.+2      	; 0x6ae <vfprintf+0x114>
 6ac:	55 c0       	rjmp	.+170    	; 0x758 <vfprintf+0x1be>
 6ae:	20 c0       	rjmp	.+64     	; 0x6f0 <vfprintf+0x156>
 6b0:	f8 01       	movw	r30, r16
 6b2:	80 81       	ld	r24, Z
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	0e 5f       	subi	r16, 0xFE	; 254
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	88 24       	eor	r8, r8
 6bc:	83 94       	inc	r8
 6be:	91 2c       	mov	r9, r1
 6c0:	53 01       	movw	r10, r6
 6c2:	12 c0       	rjmp	.+36     	; 0x6e8 <vfprintf+0x14e>
 6c4:	28 01       	movw	r4, r16
 6c6:	f2 e0       	ldi	r31, 0x02	; 2
 6c8:	4f 0e       	add	r4, r31
 6ca:	51 1c       	adc	r5, r1
 6cc:	f8 01       	movw	r30, r16
 6ce:	a0 80       	ld	r10, Z
 6d0:	b1 80       	ldd	r11, Z+1	; 0x01
 6d2:	36 fe       	sbrs	r3, 6
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <vfprintf+0x142>
 6d6:	69 2d       	mov	r22, r9
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0x146>
 6dc:	6f ef       	ldi	r22, 0xFF	; 255
 6de:	7f ef       	ldi	r23, 0xFF	; 255
 6e0:	c5 01       	movw	r24, r10
 6e2:	38 d1       	rcall	.+624    	; 0x954 <strnlen>
 6e4:	4c 01       	movw	r8, r24
 6e6:	82 01       	movw	r16, r4
 6e8:	f3 2d       	mov	r31, r3
 6ea:	ff 77       	andi	r31, 0x7F	; 127
 6ec:	3f 2e       	mov	r3, r31
 6ee:	15 c0       	rjmp	.+42     	; 0x71a <vfprintf+0x180>
 6f0:	28 01       	movw	r4, r16
 6f2:	22 e0       	ldi	r18, 0x02	; 2
 6f4:	42 0e       	add	r4, r18
 6f6:	51 1c       	adc	r5, r1
 6f8:	f8 01       	movw	r30, r16
 6fa:	a0 80       	ld	r10, Z
 6fc:	b1 80       	ldd	r11, Z+1	; 0x01
 6fe:	36 fe       	sbrs	r3, 6
 700:	03 c0       	rjmp	.+6      	; 0x708 <vfprintf+0x16e>
 702:	69 2d       	mov	r22, r9
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0x172>
 708:	6f ef       	ldi	r22, 0xFF	; 255
 70a:	7f ef       	ldi	r23, 0xFF	; 255
 70c:	c5 01       	movw	r24, r10
 70e:	17 d1       	rcall	.+558    	; 0x93e <strnlen_P>
 710:	4c 01       	movw	r8, r24
 712:	f3 2d       	mov	r31, r3
 714:	f0 68       	ori	r31, 0x80	; 128
 716:	3f 2e       	mov	r3, r31
 718:	82 01       	movw	r16, r4
 71a:	33 fc       	sbrc	r3, 3
 71c:	19 c0       	rjmp	.+50     	; 0x750 <vfprintf+0x1b6>
 71e:	82 2d       	mov	r24, r2
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	88 16       	cp	r8, r24
 724:	99 06       	cpc	r9, r25
 726:	a0 f4       	brcc	.+40     	; 0x750 <vfprintf+0x1b6>
 728:	b6 01       	movw	r22, r12
 72a:	80 e2       	ldi	r24, 0x20	; 32
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	1d d1       	rcall	.+570    	; 0x96a <fputc>
 730:	2a 94       	dec	r2
 732:	f5 cf       	rjmp	.-22     	; 0x71e <vfprintf+0x184>
 734:	f5 01       	movw	r30, r10
 736:	37 fc       	sbrc	r3, 7
 738:	85 91       	lpm	r24, Z+
 73a:	37 fe       	sbrs	r3, 7
 73c:	81 91       	ld	r24, Z+
 73e:	5f 01       	movw	r10, r30
 740:	b6 01       	movw	r22, r12
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	12 d1       	rcall	.+548    	; 0x96a <fputc>
 746:	21 10       	cpse	r2, r1
 748:	2a 94       	dec	r2
 74a:	21 e0       	ldi	r18, 0x01	; 1
 74c:	82 1a       	sub	r8, r18
 74e:	91 08       	sbc	r9, r1
 750:	81 14       	cp	r8, r1
 752:	91 04       	cpc	r9, r1
 754:	79 f7       	brne	.-34     	; 0x734 <vfprintf+0x19a>
 756:	e1 c0       	rjmp	.+450    	; 0x91a <vfprintf+0x380>
 758:	84 36       	cpi	r24, 0x64	; 100
 75a:	11 f0       	breq	.+4      	; 0x760 <vfprintf+0x1c6>
 75c:	89 36       	cpi	r24, 0x69	; 105
 75e:	39 f5       	brne	.+78     	; 0x7ae <vfprintf+0x214>
 760:	f8 01       	movw	r30, r16
 762:	37 fe       	sbrs	r3, 7
 764:	07 c0       	rjmp	.+14     	; 0x774 <vfprintf+0x1da>
 766:	60 81       	ld	r22, Z
 768:	71 81       	ldd	r23, Z+1	; 0x01
 76a:	82 81       	ldd	r24, Z+2	; 0x02
 76c:	93 81       	ldd	r25, Z+3	; 0x03
 76e:	0c 5f       	subi	r16, 0xFC	; 252
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	08 c0       	rjmp	.+16     	; 0x784 <vfprintf+0x1ea>
 774:	60 81       	ld	r22, Z
 776:	71 81       	ldd	r23, Z+1	; 0x01
 778:	07 2e       	mov	r0, r23
 77a:	00 0c       	add	r0, r0
 77c:	88 0b       	sbc	r24, r24
 77e:	99 0b       	sbc	r25, r25
 780:	0e 5f       	subi	r16, 0xFE	; 254
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	f3 2d       	mov	r31, r3
 786:	ff 76       	andi	r31, 0x6F	; 111
 788:	3f 2e       	mov	r3, r31
 78a:	97 ff       	sbrs	r25, 7
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <vfprintf+0x206>
 78e:	90 95       	com	r25
 790:	80 95       	com	r24
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	f0 68       	ori	r31, 0x80	; 128
 79e:	3f 2e       	mov	r3, r31
 7a0:	2a e0       	ldi	r18, 0x0A	; 10
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	a3 01       	movw	r20, r6
 7a6:	1d d1       	rcall	.+570    	; 0x9e2 <__ultoa_invert>
 7a8:	88 2e       	mov	r8, r24
 7aa:	86 18       	sub	r8, r6
 7ac:	44 c0       	rjmp	.+136    	; 0x836 <vfprintf+0x29c>
 7ae:	85 37       	cpi	r24, 0x75	; 117
 7b0:	31 f4       	brne	.+12     	; 0x7be <vfprintf+0x224>
 7b2:	23 2d       	mov	r18, r3
 7b4:	2f 7e       	andi	r18, 0xEF	; 239
 7b6:	b2 2e       	mov	r11, r18
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	25 c0       	rjmp	.+74     	; 0x808 <vfprintf+0x26e>
 7be:	93 2d       	mov	r25, r3
 7c0:	99 7f       	andi	r25, 0xF9	; 249
 7c2:	b9 2e       	mov	r11, r25
 7c4:	8f 36       	cpi	r24, 0x6F	; 111
 7c6:	c1 f0       	breq	.+48     	; 0x7f8 <vfprintf+0x25e>
 7c8:	18 f4       	brcc	.+6      	; 0x7d0 <vfprintf+0x236>
 7ca:	88 35       	cpi	r24, 0x58	; 88
 7cc:	79 f0       	breq	.+30     	; 0x7ec <vfprintf+0x252>
 7ce:	ae c0       	rjmp	.+348    	; 0x92c <vfprintf+0x392>
 7d0:	80 37       	cpi	r24, 0x70	; 112
 7d2:	19 f0       	breq	.+6      	; 0x7da <vfprintf+0x240>
 7d4:	88 37       	cpi	r24, 0x78	; 120
 7d6:	21 f0       	breq	.+8      	; 0x7e0 <vfprintf+0x246>
 7d8:	a9 c0       	rjmp	.+338    	; 0x92c <vfprintf+0x392>
 7da:	e9 2f       	mov	r30, r25
 7dc:	e0 61       	ori	r30, 0x10	; 16
 7de:	be 2e       	mov	r11, r30
 7e0:	b4 fe       	sbrs	r11, 4
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <vfprintf+0x264>
 7e4:	fb 2d       	mov	r31, r11
 7e6:	f4 60       	ori	r31, 0x04	; 4
 7e8:	bf 2e       	mov	r11, r31
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <vfprintf+0x264>
 7ec:	34 fe       	sbrs	r3, 4
 7ee:	0a c0       	rjmp	.+20     	; 0x804 <vfprintf+0x26a>
 7f0:	29 2f       	mov	r18, r25
 7f2:	26 60       	ori	r18, 0x06	; 6
 7f4:	b2 2e       	mov	r11, r18
 7f6:	06 c0       	rjmp	.+12     	; 0x804 <vfprintf+0x26a>
 7f8:	28 e0       	ldi	r18, 0x08	; 8
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <vfprintf+0x26e>
 7fe:	20 e1       	ldi	r18, 0x10	; 16
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <vfprintf+0x26e>
 804:	20 e1       	ldi	r18, 0x10	; 16
 806:	32 e0       	ldi	r19, 0x02	; 2
 808:	f8 01       	movw	r30, r16
 80a:	b7 fe       	sbrs	r11, 7
 80c:	07 c0       	rjmp	.+14     	; 0x81c <vfprintf+0x282>
 80e:	60 81       	ld	r22, Z
 810:	71 81       	ldd	r23, Z+1	; 0x01
 812:	82 81       	ldd	r24, Z+2	; 0x02
 814:	93 81       	ldd	r25, Z+3	; 0x03
 816:	0c 5f       	subi	r16, 0xFC	; 252
 818:	1f 4f       	sbci	r17, 0xFF	; 255
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0x28e>
 81c:	60 81       	ld	r22, Z
 81e:	71 81       	ldd	r23, Z+1	; 0x01
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 5f       	subi	r16, 0xFE	; 254
 826:	1f 4f       	sbci	r17, 0xFF	; 255
 828:	a3 01       	movw	r20, r6
 82a:	db d0       	rcall	.+438    	; 0x9e2 <__ultoa_invert>
 82c:	88 2e       	mov	r8, r24
 82e:	86 18       	sub	r8, r6
 830:	fb 2d       	mov	r31, r11
 832:	ff 77       	andi	r31, 0x7F	; 127
 834:	3f 2e       	mov	r3, r31
 836:	36 fe       	sbrs	r3, 6
 838:	0d c0       	rjmp	.+26     	; 0x854 <vfprintf+0x2ba>
 83a:	23 2d       	mov	r18, r3
 83c:	2e 7f       	andi	r18, 0xFE	; 254
 83e:	a2 2e       	mov	r10, r18
 840:	89 14       	cp	r8, r9
 842:	58 f4       	brcc	.+22     	; 0x85a <vfprintf+0x2c0>
 844:	34 fe       	sbrs	r3, 4
 846:	0b c0       	rjmp	.+22     	; 0x85e <vfprintf+0x2c4>
 848:	32 fc       	sbrc	r3, 2
 84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x2c4>
 84c:	83 2d       	mov	r24, r3
 84e:	8e 7e       	andi	r24, 0xEE	; 238
 850:	a8 2e       	mov	r10, r24
 852:	05 c0       	rjmp	.+10     	; 0x85e <vfprintf+0x2c4>
 854:	b8 2c       	mov	r11, r8
 856:	a3 2c       	mov	r10, r3
 858:	03 c0       	rjmp	.+6      	; 0x860 <vfprintf+0x2c6>
 85a:	b8 2c       	mov	r11, r8
 85c:	01 c0       	rjmp	.+2      	; 0x860 <vfprintf+0x2c6>
 85e:	b9 2c       	mov	r11, r9
 860:	a4 fe       	sbrs	r10, 4
 862:	0f c0       	rjmp	.+30     	; 0x882 <vfprintf+0x2e8>
 864:	fe 01       	movw	r30, r28
 866:	e8 0d       	add	r30, r8
 868:	f1 1d       	adc	r31, r1
 86a:	80 81       	ld	r24, Z
 86c:	80 33       	cpi	r24, 0x30	; 48
 86e:	21 f4       	brne	.+8      	; 0x878 <vfprintf+0x2de>
 870:	9a 2d       	mov	r25, r10
 872:	99 7e       	andi	r25, 0xE9	; 233
 874:	a9 2e       	mov	r10, r25
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x2f0>
 878:	a2 fe       	sbrs	r10, 2
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0x2ee>
 87c:	b3 94       	inc	r11
 87e:	b3 94       	inc	r11
 880:	04 c0       	rjmp	.+8      	; 0x88a <vfprintf+0x2f0>
 882:	8a 2d       	mov	r24, r10
 884:	86 78       	andi	r24, 0x86	; 134
 886:	09 f0       	breq	.+2      	; 0x88a <vfprintf+0x2f0>
 888:	b3 94       	inc	r11
 88a:	a3 fc       	sbrc	r10, 3
 88c:	10 c0       	rjmp	.+32     	; 0x8ae <vfprintf+0x314>
 88e:	a0 fe       	sbrs	r10, 0
 890:	06 c0       	rjmp	.+12     	; 0x89e <vfprintf+0x304>
 892:	b2 14       	cp	r11, r2
 894:	80 f4       	brcc	.+32     	; 0x8b6 <vfprintf+0x31c>
 896:	28 0c       	add	r2, r8
 898:	92 2c       	mov	r9, r2
 89a:	9b 18       	sub	r9, r11
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <vfprintf+0x31e>
 89e:	b2 14       	cp	r11, r2
 8a0:	58 f4       	brcc	.+22     	; 0x8b8 <vfprintf+0x31e>
 8a2:	b6 01       	movw	r22, r12
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	60 d0       	rcall	.+192    	; 0x96a <fputc>
 8aa:	b3 94       	inc	r11
 8ac:	f8 cf       	rjmp	.-16     	; 0x89e <vfprintf+0x304>
 8ae:	b2 14       	cp	r11, r2
 8b0:	18 f4       	brcc	.+6      	; 0x8b8 <vfprintf+0x31e>
 8b2:	2b 18       	sub	r2, r11
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0x320>
 8b6:	98 2c       	mov	r9, r8
 8b8:	21 2c       	mov	r2, r1
 8ba:	a4 fe       	sbrs	r10, 4
 8bc:	0f c0       	rjmp	.+30     	; 0x8dc <vfprintf+0x342>
 8be:	b6 01       	movw	r22, r12
 8c0:	80 e3       	ldi	r24, 0x30	; 48
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	52 d0       	rcall	.+164    	; 0x96a <fputc>
 8c6:	a2 fe       	sbrs	r10, 2
 8c8:	16 c0       	rjmp	.+44     	; 0x8f6 <vfprintf+0x35c>
 8ca:	a1 fc       	sbrc	r10, 1
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <vfprintf+0x33a>
 8ce:	88 e7       	ldi	r24, 0x78	; 120
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x33e>
 8d4:	88 e5       	ldi	r24, 0x58	; 88
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	b6 01       	movw	r22, r12
 8da:	0c c0       	rjmp	.+24     	; 0x8f4 <vfprintf+0x35a>
 8dc:	8a 2d       	mov	r24, r10
 8de:	86 78       	andi	r24, 0x86	; 134
 8e0:	51 f0       	breq	.+20     	; 0x8f6 <vfprintf+0x35c>
 8e2:	a1 fe       	sbrs	r10, 1
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x350>
 8e6:	8b e2       	ldi	r24, 0x2B	; 43
 8e8:	01 c0       	rjmp	.+2      	; 0x8ec <vfprintf+0x352>
 8ea:	80 e2       	ldi	r24, 0x20	; 32
 8ec:	a7 fc       	sbrc	r10, 7
 8ee:	8d e2       	ldi	r24, 0x2D	; 45
 8f0:	b6 01       	movw	r22, r12
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	3a d0       	rcall	.+116    	; 0x96a <fputc>
 8f6:	89 14       	cp	r8, r9
 8f8:	30 f4       	brcc	.+12     	; 0x906 <vfprintf+0x36c>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e3       	ldi	r24, 0x30	; 48
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	34 d0       	rcall	.+104    	; 0x96a <fputc>
 902:	9a 94       	dec	r9
 904:	f8 cf       	rjmp	.-16     	; 0x8f6 <vfprintf+0x35c>
 906:	8a 94       	dec	r8
 908:	f3 01       	movw	r30, r6
 90a:	e8 0d       	add	r30, r8
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	b6 01       	movw	r22, r12
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	2a d0       	rcall	.+84     	; 0x96a <fputc>
 916:	81 10       	cpse	r8, r1
 918:	f6 cf       	rjmp	.-20     	; 0x906 <vfprintf+0x36c>
 91a:	22 20       	and	r2, r2
 91c:	09 f4       	brne	.+2      	; 0x920 <vfprintf+0x386>
 91e:	4e ce       	rjmp	.-868    	; 0x5bc <vfprintf+0x22>
 920:	b6 01       	movw	r22, r12
 922:	80 e2       	ldi	r24, 0x20	; 32
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	21 d0       	rcall	.+66     	; 0x96a <fputc>
 928:	2a 94       	dec	r2
 92a:	f7 cf       	rjmp	.-18     	; 0x91a <vfprintf+0x380>
 92c:	f6 01       	movw	r30, r12
 92e:	86 81       	ldd	r24, Z+6	; 0x06
 930:	97 81       	ldd	r25, Z+7	; 0x07
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x39e>
 934:	8f ef       	ldi	r24, 0xFF	; 255
 936:	9f ef       	ldi	r25, 0xFF	; 255
 938:	2b 96       	adiw	r28, 0x0b	; 11
 93a:	e2 e1       	ldi	r30, 0x12	; 18
 93c:	cc c0       	rjmp	.+408    	; 0xad6 <__epilogue_restores__>

0000093e <strnlen_P>:
 93e:	fc 01       	movw	r30, r24
 940:	05 90       	lpm	r0, Z+
 942:	61 50       	subi	r22, 0x01	; 1
 944:	70 40       	sbci	r23, 0x00	; 0
 946:	01 10       	cpse	r0, r1
 948:	d8 f7       	brcc	.-10     	; 0x940 <strnlen_P+0x2>
 94a:	80 95       	com	r24
 94c:	90 95       	com	r25
 94e:	8e 0f       	add	r24, r30
 950:	9f 1f       	adc	r25, r31
 952:	08 95       	ret

00000954 <strnlen>:
 954:	fc 01       	movw	r30, r24
 956:	61 50       	subi	r22, 0x01	; 1
 958:	70 40       	sbci	r23, 0x00	; 0
 95a:	01 90       	ld	r0, Z+
 95c:	01 10       	cpse	r0, r1
 95e:	d8 f7       	brcc	.-10     	; 0x956 <strnlen+0x2>
 960:	80 95       	com	r24
 962:	90 95       	com	r25
 964:	8e 0f       	add	r24, r30
 966:	9f 1f       	adc	r25, r31
 968:	08 95       	ret

0000096a <fputc>:
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	fb 01       	movw	r30, r22
 974:	23 81       	ldd	r18, Z+3	; 0x03
 976:	21 fd       	sbrc	r18, 1
 978:	03 c0       	rjmp	.+6      	; 0x980 <fputc+0x16>
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	9f ef       	ldi	r25, 0xFF	; 255
 97e:	2c c0       	rjmp	.+88     	; 0x9d8 <fputc+0x6e>
 980:	22 ff       	sbrs	r18, 2
 982:	16 c0       	rjmp	.+44     	; 0x9b0 <fputc+0x46>
 984:	46 81       	ldd	r20, Z+6	; 0x06
 986:	57 81       	ldd	r21, Z+7	; 0x07
 988:	24 81       	ldd	r18, Z+4	; 0x04
 98a:	35 81       	ldd	r19, Z+5	; 0x05
 98c:	42 17       	cp	r20, r18
 98e:	53 07       	cpc	r21, r19
 990:	44 f4       	brge	.+16     	; 0x9a2 <fputc+0x38>
 992:	a0 81       	ld	r26, Z
 994:	b1 81       	ldd	r27, Z+1	; 0x01
 996:	9d 01       	movw	r18, r26
 998:	2f 5f       	subi	r18, 0xFF	; 255
 99a:	3f 4f       	sbci	r19, 0xFF	; 255
 99c:	31 83       	std	Z+1, r19	; 0x01
 99e:	20 83       	st	Z, r18
 9a0:	8c 93       	st	X, r24
 9a2:	26 81       	ldd	r18, Z+6	; 0x06
 9a4:	37 81       	ldd	r19, Z+7	; 0x07
 9a6:	2f 5f       	subi	r18, 0xFF	; 255
 9a8:	3f 4f       	sbci	r19, 0xFF	; 255
 9aa:	37 83       	std	Z+7, r19	; 0x07
 9ac:	26 83       	std	Z+6, r18	; 0x06
 9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <fputc+0x6e>
 9b0:	8b 01       	movw	r16, r22
 9b2:	ec 01       	movw	r28, r24
 9b4:	fb 01       	movw	r30, r22
 9b6:	00 84       	ldd	r0, Z+8	; 0x08
 9b8:	f1 85       	ldd	r31, Z+9	; 0x09
 9ba:	e0 2d       	mov	r30, r0
 9bc:	09 95       	icall
 9be:	89 2b       	or	r24, r25
 9c0:	e1 f6       	brne	.-72     	; 0x97a <fputc+0x10>
 9c2:	d8 01       	movw	r26, r16
 9c4:	16 96       	adiw	r26, 0x06	; 6
 9c6:	8d 91       	ld	r24, X+
 9c8:	9c 91       	ld	r25, X
 9ca:	17 97       	sbiw	r26, 0x07	; 7
 9cc:	01 96       	adiw	r24, 0x01	; 1
 9ce:	17 96       	adiw	r26, 0x07	; 7
 9d0:	9c 93       	st	X, r25
 9d2:	8e 93       	st	-X, r24
 9d4:	16 97       	sbiw	r26, 0x06	; 6
 9d6:	ce 01       	movw	r24, r28
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	0f 91       	pop	r16
 9e0:	08 95       	ret

000009e2 <__ultoa_invert>:
 9e2:	fa 01       	movw	r30, r20
 9e4:	aa 27       	eor	r26, r26
 9e6:	28 30       	cpi	r18, 0x08	; 8
 9e8:	51 f1       	breq	.+84     	; 0xa3e <__ultoa_invert+0x5c>
 9ea:	20 31       	cpi	r18, 0x10	; 16
 9ec:	81 f1       	breq	.+96     	; 0xa4e <__ultoa_invert+0x6c>
 9ee:	e8 94       	clt
 9f0:	6f 93       	push	r22
 9f2:	6e 7f       	andi	r22, 0xFE	; 254
 9f4:	6e 5f       	subi	r22, 0xFE	; 254
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255
 9f8:	8f 4f       	sbci	r24, 0xFF	; 255
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	af 4f       	sbci	r26, 0xFF	; 255
 9fe:	b1 e0       	ldi	r27, 0x01	; 1
 a00:	3e d0       	rcall	.+124    	; 0xa7e <__ultoa_invert+0x9c>
 a02:	b4 e0       	ldi	r27, 0x04	; 4
 a04:	3c d0       	rcall	.+120    	; 0xa7e <__ultoa_invert+0x9c>
 a06:	67 0f       	add	r22, r23
 a08:	78 1f       	adc	r23, r24
 a0a:	89 1f       	adc	r24, r25
 a0c:	9a 1f       	adc	r25, r26
 a0e:	a1 1d       	adc	r26, r1
 a10:	68 0f       	add	r22, r24
 a12:	79 1f       	adc	r23, r25
 a14:	8a 1f       	adc	r24, r26
 a16:	91 1d       	adc	r25, r1
 a18:	a1 1d       	adc	r26, r1
 a1a:	6a 0f       	add	r22, r26
 a1c:	71 1d       	adc	r23, r1
 a1e:	81 1d       	adc	r24, r1
 a20:	91 1d       	adc	r25, r1
 a22:	a1 1d       	adc	r26, r1
 a24:	20 d0       	rcall	.+64     	; 0xa66 <__ultoa_invert+0x84>
 a26:	09 f4       	brne	.+2      	; 0xa2a <__ultoa_invert+0x48>
 a28:	68 94       	set
 a2a:	3f 91       	pop	r19
 a2c:	2a e0       	ldi	r18, 0x0A	; 10
 a2e:	26 9f       	mul	r18, r22
 a30:	11 24       	eor	r1, r1
 a32:	30 19       	sub	r19, r0
 a34:	30 5d       	subi	r19, 0xD0	; 208
 a36:	31 93       	st	Z+, r19
 a38:	de f6       	brtc	.-74     	; 0x9f0 <__ultoa_invert+0xe>
 a3a:	cf 01       	movw	r24, r30
 a3c:	08 95       	ret
 a3e:	46 2f       	mov	r20, r22
 a40:	47 70       	andi	r20, 0x07	; 7
 a42:	40 5d       	subi	r20, 0xD0	; 208
 a44:	41 93       	st	Z+, r20
 a46:	b3 e0       	ldi	r27, 0x03	; 3
 a48:	0f d0       	rcall	.+30     	; 0xa68 <__ultoa_invert+0x86>
 a4a:	c9 f7       	brne	.-14     	; 0xa3e <__ultoa_invert+0x5c>
 a4c:	f6 cf       	rjmp	.-20     	; 0xa3a <__ultoa_invert+0x58>
 a4e:	46 2f       	mov	r20, r22
 a50:	4f 70       	andi	r20, 0x0F	; 15
 a52:	40 5d       	subi	r20, 0xD0	; 208
 a54:	4a 33       	cpi	r20, 0x3A	; 58
 a56:	18 f0       	brcs	.+6      	; 0xa5e <__ultoa_invert+0x7c>
 a58:	49 5d       	subi	r20, 0xD9	; 217
 a5a:	31 fd       	sbrc	r19, 1
 a5c:	40 52       	subi	r20, 0x20	; 32
 a5e:	41 93       	st	Z+, r20
 a60:	02 d0       	rcall	.+4      	; 0xa66 <__ultoa_invert+0x84>
 a62:	a9 f7       	brne	.-22     	; 0xa4e <__ultoa_invert+0x6c>
 a64:	ea cf       	rjmp	.-44     	; 0xa3a <__ultoa_invert+0x58>
 a66:	b4 e0       	ldi	r27, 0x04	; 4
 a68:	a6 95       	lsr	r26
 a6a:	97 95       	ror	r25
 a6c:	87 95       	ror	r24
 a6e:	77 95       	ror	r23
 a70:	67 95       	ror	r22
 a72:	ba 95       	dec	r27
 a74:	c9 f7       	brne	.-14     	; 0xa68 <__ultoa_invert+0x86>
 a76:	00 97       	sbiw	r24, 0x00	; 0
 a78:	61 05       	cpc	r22, r1
 a7a:	71 05       	cpc	r23, r1
 a7c:	08 95       	ret
 a7e:	9b 01       	movw	r18, r22
 a80:	ac 01       	movw	r20, r24
 a82:	0a 2e       	mov	r0, r26
 a84:	06 94       	lsr	r0
 a86:	57 95       	ror	r21
 a88:	47 95       	ror	r20
 a8a:	37 95       	ror	r19
 a8c:	27 95       	ror	r18
 a8e:	ba 95       	dec	r27
 a90:	c9 f7       	brne	.-14     	; 0xa84 <__ultoa_invert+0xa2>
 a92:	62 0f       	add	r22, r18
 a94:	73 1f       	adc	r23, r19
 a96:	84 1f       	adc	r24, r20
 a98:	95 1f       	adc	r25, r21
 a9a:	a0 1d       	adc	r26, r0
 a9c:	08 95       	ret

00000a9e <__prologue_saves__>:
 a9e:	2f 92       	push	r2
 aa0:	3f 92       	push	r3
 aa2:	4f 92       	push	r4
 aa4:	5f 92       	push	r5
 aa6:	6f 92       	push	r6
 aa8:	7f 92       	push	r7
 aaa:	8f 92       	push	r8
 aac:	9f 92       	push	r9
 aae:	af 92       	push	r10
 ab0:	bf 92       	push	r11
 ab2:	cf 92       	push	r12
 ab4:	df 92       	push	r13
 ab6:	ef 92       	push	r14
 ab8:	ff 92       	push	r15
 aba:	0f 93       	push	r16
 abc:	1f 93       	push	r17
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
 ac6:	ca 1b       	sub	r28, r26
 ac8:	db 0b       	sbc	r29, r27
 aca:	0f b6       	in	r0, 0x3f	; 63
 acc:	f8 94       	cli
 ace:	de bf       	out	0x3e, r29	; 62
 ad0:	0f be       	out	0x3f, r0	; 63
 ad2:	cd bf       	out	0x3d, r28	; 61
 ad4:	09 94       	ijmp

00000ad6 <__epilogue_restores__>:
 ad6:	2a 88       	ldd	r2, Y+18	; 0x12
 ad8:	39 88       	ldd	r3, Y+17	; 0x11
 ada:	48 88       	ldd	r4, Y+16	; 0x10
 adc:	5f 84       	ldd	r5, Y+15	; 0x0f
 ade:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ae4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ae6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ae8:	b9 84       	ldd	r11, Y+9	; 0x09
 aea:	c8 84       	ldd	r12, Y+8	; 0x08
 aec:	df 80       	ldd	r13, Y+7	; 0x07
 aee:	ee 80       	ldd	r14, Y+6	; 0x06
 af0:	fd 80       	ldd	r15, Y+5	; 0x05
 af2:	0c 81       	ldd	r16, Y+4	; 0x04
 af4:	1b 81       	ldd	r17, Y+3	; 0x03
 af6:	aa 81       	ldd	r26, Y+2	; 0x02
 af8:	b9 81       	ldd	r27, Y+1	; 0x01
 afa:	ce 0f       	add	r28, r30
 afc:	d1 1d       	adc	r29, r1
 afe:	0f b6       	in	r0, 0x3f	; 63
 b00:	f8 94       	cli
 b02:	de bf       	out	0x3e, r29	; 62
 b04:	0f be       	out	0x3f, r0	; 63
 b06:	cd bf       	out	0x3d, r28	; 61
 b08:	ed 01       	movw	r28, r26
 b0a:	08 95       	ret

00000b0c <_exit>:
 b0c:	f8 94       	cli

00000b0e <__stop_program>:
 b0e:	ff cf       	rjmp	.-2      	; 0xb0e <__stop_program>
